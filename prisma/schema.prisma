generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int          @id @default(autoincrement())
  username     String       @unique
  about        String?
  departmentId Int?
  name         String?
  picture      String?
  status       String?
  email        String       @unique
  password     String
  bio          String?
  levelId      Int?
  kingdom      String?
  latitude     Float?
  longitude    Float?
  coverImage   String?
  comments     Comment[]
  orders       Order[]
  posts        Post[]
  shops        Shop[]
  department   Department?  @relation(fields: [departmentId], references: [id])
  level        Level?       @relation(fields: [levelId], references: [id])
  statuses     UserStatus[]

  conversationsIds String[]

  conversations Conversation[]
  messages      Message[]
}

model Conversation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  participantIds Int[]
  participants   User[]

  messageIds String[]
  messages   Message[]
}

model Message {
  id String @id @default(cuid())

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  senderId Int
  sender   User @relation(fields: [senderId], references: [id])

  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isRead Boolean @default(false)
}

enum Gender {
  male
  female
}

model Post {
  id        String    @id @default(cuid())
  authorId  String
  content   Json?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  media     String?
  text      String?
  comments  Comment[]
  author    User      @relation(fields: [authorId], references: [username], onDelete: Cascade)
}

model Comment {
  id              String    @id @default(cuid())
  text            String
  postId          String
  authorId        String
  parentCommentId String?
  createdAt       DateTime  @default(now())
  author          User      @relation(fields: [authorId], references: [username], onDelete: Cascade)
  parentComment   Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: Cascade)
  replies         Comment[] @relation("CommentReplies")
  post            Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Shop {
  id             Int           @id
  name           String        @unique
  description    String
  category       String
  requestedOrder String?
  size           Float         @default(0.0007)
  userId         Int
  kingdom        String
  latitude       Float
  longitude      Float
  image          String?
  orders         Order[]
  user           User          @relation(fields: [userId], references: [id])
  shopItems      ShopItem[]
  statuses       StoreStatus[]
}

model UserStatus {
  id        Int      @id @default(autoincrement())
  content   String?
  media     String?
  createdAt DateTime @default(now())
  expiresAt DateTime
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model StoreStatus {
  id        Int      @id @default(autoincrement())
  content   String?
  media     String?
  createdAt DateTime @default(now())
  expiresAt DateTime
  shopId    String
  shop      Shop     @relation(fields: [shopId], references: [name])
}

model Department {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model Level {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model ShopItem {
  id       Int     @id @default(autoincrement())
  name     String
  price    Float
  image    String
  shopId   Int
  tag      String?
  quantity Int?    @default(1)
  shop     Shop    @relation(fields: [shopId], references: [id])
}

model Order {
  id          Int         @id @default(autoincrement())
  orderId     String      @unique
  totalAmount Float
  orderDate   DateTime
  status      String
  userId      Int
  shopId      String
  comment     String?
  shop        Shop        @relation(fields: [shopId], references: [name])
  user        User        @relation(fields: [userId], references: [id])
  items       OrderItem[]
}

model OrderItem {
  id       Int    @id @default(autoincrement())
  name     String
  quantity Int
  price    Float
  orderId  Int
  order    Order  @relation(fields: [orderId], references: [id])
}

model Place {
  id        Int     @id @default(autoincrement())
  email     String?
  userName  String?
  placeName String
  longitude Float
  latitude  Float
  createdAt String?
}
